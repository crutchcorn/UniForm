import{_ as e,c as t,o,Q as d}from"./chunks/framework.989a1717.js";const u=JSON.parse('{"title":"Form","description":"","frontmatter":{},"headers":[],"relativePath":"reference/form.md","lastUpdated":1708649883000}'),a={name:"reference/form.md"},s=d(`<h1 id="form" tabindex="-1">Form <a class="header-anchor" href="#form" aria-label="Permalink to &quot;Form&quot;">​</a></h1><p>The <code>Form</code> component is the main component of this library. It is responsible for managing the state of the form and must be the parent of all <code>Field</code> components.</p><p>An example <code>Form</code> usage is:</p><div class="language-jsx"><button title="Copy Code" class="copy"></button><span class="lang">jsx</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;">&lt;</span><span style="color:#FFCB6B;">Form</span><span style="color:#89DDFF;"> </span><span style="color:#C792EA;">onSubmit</span><span style="color:#89DDFF;">={()</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{}}&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">{({</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;font-style:italic;">submit</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">})</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">button</span><span style="color:#89DDFF;"> </span><span style="color:#C792EA;">onClick</span><span style="color:#89DDFF;">={</span><span style="color:#A6ACCD;">submit</span><span style="color:#89DDFF;">}&gt;</span><span style="color:#A6ACCD;">Submit</span><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">button</span><span style="color:#89DDFF;">&gt;}</span></span>
<span class="line"><span style="color:#89DDFF;">&lt;/</span><span style="color:#FFCB6B;">Form</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"></span></code></pre></div><h3 id="form-props" tabindex="-1">Form Props <a class="header-anchor" href="#form-props" aria-label="Permalink to &quot;Form Props&quot;">​</a></h3><p>The <code>Form</code> component takes the following props:</p><table><thead><tr><th>Method</th><th>Parameters</th><th>Expected Return</th><th>Description</th></tr></thead><tbody><tr><td><code>onSubmit</code></td><td><code>Record&lt;string, any&gt;</code>, <a href="#interface-forminstance"><code>FormInstance</code></a></td><td></td><td>The function to call when the form is submitted. The first argument is the values of a form submitted. It might look something like:<br><code>{email: &quot;test@example.com&quot;, password: &quot;Hunter2!&quot;, confirmpassword: &quot;Hunter2!&quot;}</code></td></tr><tr><td><code>children</code></td><td><a href="#interface-forminstance"><code>FormInstance</code></a></td><td><code>JSX.Element</code></td><td>This is the component child function to pass, which accepts the arguments for FormInstance.</td></tr><tr><td><code>memoChild</code></td><td><code>any[]</code></td><td></td><td>An array of items passed to the inner <code>useMemo</code> <a href="/guides/performance-optimizations.html">which helps prevent re-renders on the form.</a></td></tr><tr><td><code>submitWhenInvalid</code></td><td><code>boolean</code></td><td></td><td>Typically, when a form&#39;s fields are invalid, the <code>onSubmit</code> function will not run. Passing <code>true</code> to <code>submitWhenInvalid</code> bypasses this functionality.</td></tr></tbody></table><h3 id="interface-forminstance" tabindex="-1"><em>Interface</em> <code>FormInstance</code> <a class="header-anchor" href="#interface-forminstance" aria-label="Permalink to &quot;_Interface_ \`FormInstance\`&quot;">​</a></h3><p>These are the properties that are passed to the <code>&lt;Form&gt;</code> component&#39;s child function, the <code>FormContext</code>, and the second arguments of the <code>onSubmit</code> function as well as all <a href="/reference/field.html#field-props"><code>&lt;Field&gt;</code> <code>onXValidate</code> property functions</a>:</p><table><thead><tr><th>Property</th><th>Type</th><th>Description</th></tr></thead><tbody><tr><td><code>submit</code></td><td><code>() =&gt; void</code></td><td>The function to run when you&#39;re ready to submit your form. This function will not do anything if there are <code>errors</code> on the form.</td></tr><tr><td><code>reset</code></td><td><code>() =&gt; void</code></td><td>The function to call when resetting the form to its default values specified by resetWithValue. It will also reset the form&#39;s error, dirty, and touched states.</td></tr><tr><td><code>errors</code></td><td><code>string[]</code></td><td>An array of all errors on all form fields.</td></tr><tr><td><code>errorsMap</code></td><td><code>Record&lt;string, string[]</code> or <code>DeepMap&lt;T, string[]&gt;</code></td><td>An object that stores errors by field name.<br><br>If you&#39;ve passed a type <code>T</code> to <code>Form</code>, the TypeScript type of <code>errorsMap</code> is instead a deep map of <code>T</code> and all deeply nested fields are <code>string[]</code>.</td></tr><tr><td><code>isValid</code></td><td><code>boolean</code></td><td>A boolean to check if the form is valid or not.</td></tr><tr><td><code>isValidating</code></td><td><code>boolean</code></td><td>A boolean to check if the form fields are running a validation.</td></tr><tr><td><code>isSubmitted</code></td><td><code>boolean</code></td><td>A boolean to check if the form has had an attempted submission or not.</td></tr><tr><td><code>setIsSubmitted</code></td><td><code>(val: boolean) =&gt; void</code></td><td>A method to reset the <code>isSubmitted</code> field</td></tr><tr><td><code>isDirty</code></td><td><code>boolean</code></td><td>A boolean to check if any of the form fields are dirty or not.</td></tr><tr><td><code>setIsDirty</code></td><td><code>(val: boolean) =&gt; void</code></td><td>A method to reset the <code>isDirty</code> properties of all of the Form&#39;s Fields.</td></tr><tr><td><code>isTouched</code></td><td><code>boolean</code></td><td>A boolean to check if any of the form fields have been touched or not.</td></tr><tr><td><code>setIsTouched</code></td><td><code>(val: boolean) =&gt; void</code></td><td>A method to reset the <code>isTouched</code> properties of all of the Form&#39;s Fields.</td></tr><tr><td><code>getFieldValue</code></td><td><code>(fieldName: sting) =&gt; FieldInstance</code></td><td>Takes the field name and returns a <a href="/reference/field.html#interface-fieldinstance"><code>FieldInstance</code></a> or <a href="/reference/array.html#interface-fieldarrayinstance"><code>FieldArrayInstance</code></a> representation of the named field.</td></tr><tr><td><code>value</code></td><td><code>Record&lt;string, any&gt;</code></td><td>The values of a form&#39;s fields. It might look something like:<br><code>{email: &quot;test@example.com&quot;, password: &quot;Hunter2!&quot;, confirmpassword: &quot;Hunter2!&quot;}</code></td></tr></tbody></table>`,10),r=[s];function n(c,l,i,p,h,m){return o(),t("div",null,r)}const y=e(a,[["render",n]]);export{u as __pageData,y as default};
